USE QuanLyQuanBiDa

-- CREATE PROC LOGIN
CREATE PROCEDURE PROC_CHECKLOGIN
@ACC VARCHAR(50),
@PASS VARCHAR(50),
@RESULT BIT OUTPUT
AS
BEGIN
	SET NOCOUNT ON;
	-- Kiểm tra thông tin đăng nhập
	IF EXISTS (SELECT 1 FROM USERS_TBL WHERE BINARY_CHECKSUM(ACCOUNT) = BINARY_CHECKSUM(@ACC) AND BINARY_CHECKSUM(PASS) = BINARY_CHECKSUM(@PASS))
		SET @RESULT = 1; -- Đúng
	ELSE
		SET @RESULT = 0; -- Sai
END


-- CREATE PROC CHANGE PASS
CREATE PROCEDURE PROC_CHANGEPASS
    @ACC VARCHAR(50),
    @NEWPASS VARCHAR(50)
AS
BEGIN
    SET NOCOUNT ON;
	UPDATE USERS_TBL
	SET PASS = @NEWPASS
	WHERE @ACC = ACCOUNT;
END



-- PROC_GET USER INFOMATION
CREATE PROCEDURE PROC_GETUSERIFNOMATION
    @Username VARCHAR(50)
AS
BEGIN
    SET NOCOUNT ON;

    SELECT * FROM USERS_TBL WHERE ACCOUNT = @Username
END



-- PROC_GET STAFF INFO
CREATE PROCEDURE PROC_GETSTAFFINFO
    @ACCOUNT VARCHAR(50)
AS
BEGIN
    SET NOCOUNT ON;

    SELECT * FROM STAFFS WHERE ACCOUNT = @ACCOUNT
END



-- PROC_GET STAFF INFO
CREATE PROCEDURE PROC_GETLISTSTAFF
AS
BEGIN
    SET NOCOUNT ON;

    SELECT * FROM STAFFS
END



-- CREATE PROC CREATE VIP
CREATE PROCEDURE PROC_CREATEVIP
@NAME NVARCHAR(255),
@PHONE VARCHAR(10),
@RESULT BIT OUTPUT
AS
BEGIN
	INSERT INTO VIPCUSTOMERS (NAMECUS, PHONENUM)
	SELECT @NAME, @PHONE
	WHERE NOT EXISTS (SELECT 1 FROM VIPCUSTOMERS WHERE PHONENUM = @PHONE);
	IF EXISTS (SELECT 1 FROM VIPCUSTOMERS WHERE NAMECUS = @NAME AND PHONENUM = @PHONE)
		SET @RESULT = 1; -- Thông tin tồn tại trong VIPCUSTOMERS
	ELSE
		SET @RESULT = 0; -- Thông tin không tồn tại trong VIPCUSTOMERS
END



-- CREATE PROC UPDATE SHIFT
CREATE PROCEDURE PROC_UPDATESHIFT
@SHIFT INT,
@MONTH INT,
@WEEK INT,
@IDSTAFF VARCHAR(10),
@TIME DATE
AS
BEGIN
	UPDATE SHIFTS
	SET IDSTAFF = @IDSTAFF, TIMELINE = @TIME
	WHERE @SHIFT = SHIFTT AND @MONTH = MONTHSHIFT AND @WEEK = WEEKSHIFT;
END



-- CREATE PROC GET ID STAFF
CREATE PROCEDURE PROC_GETSTAFFSHIFT
@SHIFT INT,
@MONTH INT,
@WEEK INT
AS
BEGIN
	SELECT IDSTAFF FROM SHIFTS
	WHERE @SHIFT = SHIFTT AND @MONTH  = MONTHSHIFT AND @WEEK  = WEEKSHIFT
END



-- create proc create new shift
CREATE PROCEDURE CreateShift
    @MONTH INT,
    @WEEK INT,
    @IDSTAFF varchar(10),
    @TIME DATE,
    @SHIFT varchar(10)
	AS
BEGIN
	
    DECLARE @IDSHIFT VARCHAR(50)
    SET @IDSHIFT = 'ca' + @SHIFT + CAST(@WEEK AS VARCHAR) + CAST(@MONTH AS VARCHAR)

    INSERT INTO SHIFTS (IDSHIFT, MONTHSHIFT, WEEKSHIFT, IDSTAFF, TIMELINE, SHIFTT)
    VALUES (@IDSHIFT, @MONTH, @WEEK, @IDSTAFF, @TIME, @SHIFT)
END




-- PROC_CHECK STAFF exist
CREATE PROCEDURE PROC_CHECKSTAFFSHIFT
    @IDSTAFF VARCHAR(10)
AS
BEGIN
    SELECT 1 FROM STAFFS
    WHERE IDSTAFF = @IDSTAFF
END




-- PROC_CHECK Shift exist
CREATE PROCEDURE PROC_CHECKIDSHIFT
    @IDSHIFT VARCHAR(10)
AS
BEGIN
    SELECT 1 FROM SHIFTS
    WHERE IDSHIFT = @IDSHIFT
END



-- PROC_CHECK Shift exist
CREATE PROCEDURE PROC_CHECKACCOUNT
    @ACCOUNT VARCHAR(50)
AS
BEGIN
    SELECT 1 FROM STAFFS
    WHERE ACCOUNT = @ACCOUNT
END



-- PROC get shift for staff
CREATE PROCEDURE PROC_GETSHIFTOFSTAFF
    @USER VARCHAR(50),
	@MONTH int,
	@WEEK INT
AS
BEGIN
    SELECT SH.IDSHIFT, SH.TIMELINE, SH.SHIFTT, SH.WEEKSHIFT, SH.MONTHSHIFT FROM SHIFTS AS SH, STAFFS AS ST
    WHERE ST.ACCOUNT = @USER AND ST.IDSTAFF = SH.IDSTAFF AND @MONTH = SH.MONTHSHIFT AND @WEEK = SH.WEEKSHIFT;
END



-- GET TABLE
CREATE PROCEDURE PROC_GETTABLE
    @IDTABLE VARCHAR(10)
AS
BEGIN
    SELECT IDTABLE, CLASSIFY, SITUATION FROM BILLARDTABLE WHERE @IDTABLE = IDTABLE;
END



-- reverve table billiard
CREATE PROCEDURE PROC_REVERVETABLE
	@IDTABLE VARCHAR(10),
    @StartTime DATETIME,
	@IDSTAFF VARCHAR(10),
	@PHONENUM VARCHAR(10)
AS
BEGIN
	UPDATE SETTABLE
	SET TIMESTART = @StartTime, IDSTAFF = @IDSTAFF, PHONENUM = @PHONENUM
	WHERE @IDTABLE = IDTABLE;

	UPDATE BILLARDTABLE
	SET SITUATION = 'Booked'
	WHERE IDTABLE = @IDTABLE;
END;



-- reset table
CREATE PROC PROC_RESETTABLE
	@IDTABLE VARCHAR(10)
AS
BEGIN
	UPDATE SETTABLE
	SET TIMESTART = NULL, IDSTAFF = NULL, PHONENUM = NULL
	WHERE @IDTABLE = IDTABLE

	UPDATE BILLARDTABLE
	SET SITUATION = 'Empty'
	WHERE @IDTABLE = IDTABLE
END;

select * from SETTABLE



-- Check phone
CREATE PROCEDURE PROC_CheckVIP
	@PHONENUM VARCHAR(10)
AS
BEGIN
	SELECT 1 FROM VIPCUSTOMERS
    WHERE PHONENUM = @PHONENUM
END;



-- add new staff
CREATE PROC PROC_ADDNEWSTAFF
	@NAME NVARCHAR(255),
	@PHONENUM NVARCHAR(10),
	@ACCOUNT VARCHAR(50)
AS
BEGIN
	DECLARE @NEWID VARCHAR(10)
	SELECT TOP 1 @NEWID=IDSTAFF FROM STAFFS ORDER BY IDSTAFF DESC
	IF @NEWID IS NULL 
	BEGIN 
		SET @NEWID='NV0001' 
	END
	ELSE 
	BEGIN
		SET @NEWID = CAST(CAST(SUBSTRING(@NEWID, 3, LEN(@NEWID)-2) AS INT) + 1 AS VARCHAR(10))
		
		SET @NEWID = 'NV' + RIGHT('0000' + @NEWID, 4)
		PRINT @NEWID
	END
    INSERT INTO STAFFS (IDSTAFF, ACCOUNT, NAMESTAFF, PHONENUM,POSITION)
    VALUES (@NEWID, @ACCOUNT, @NAME, @PHONENUM,'STAFF')
END;



-- CREATR ACCOUNT
CREATE PROC PROC_CREATENEWACCOUNT
	@ACCOUNT VARCHAR(50)
AS
BEGIN
    INSERT INTO USERS_TBL (ACCOUNT, PASS, IDACCESS)
VALUES 
	(@ACCOUNT, 'p123', 2)
END;



-- CHANGE STAFF INFO
CREATE PROCEDURE PROC_CHANGESTAFF
	@NAME NVARCHAR(255),
	@PHONENUM NVARCHAR(10),
	@IDSTAFF VARCHAR(50)
AS
BEGIN
	UPDATE STAFFS
	SET NAMESTAFF = @NAME, PHONENUM = @PHONENUM
	WHERE IDSTAFF = @IDSTAFF
END;



-- get staff by id
CREATE PROC PROC_GETSTAFFINFOBYID
	@IDSTAFF VARCHAR(10)
AS
BEGIN
	select NAMESTAFF, PHONENUM, ACCOUNT FROM STAFFS WHERE IDSTAFF = @IDSTAFF;
END;




-- delete staff
CREATE PROCEDURE PROC_DELETESTAFF
	@IDSTAFF VARCHAR(10)
AS
BEGIN
	BEGIN TRY
		BEGIN TRANSACTION
		
		DELETE FROM USERS_TBL
		WHERE ACCOUNT = (
			SELECT ACCOUNT
			FROM STAFFS
			WHERE IDSTAFF = @IDSTAFF
		)

		DELETE FROM STAFFS
		WHERE IDSTAFF = @IDSTAFF
		
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0
			ROLLBACK TRANSACTION
		
		THROW
	END CATCH
END;



-- Thanh toan luong
CREATE PROCEDURE CalculateSalary
    @MONTH INT,
    @IDSTAFF VARCHAR(10),
    @SALARY INT,
    @TotalSalary INT OUTPUT
AS
BEGIN
    SET NOCOUNT ON;

    SELECT @TotalSalary = COUNT(*) * @SALARY
    FROM SHIFTS
    WHERE MONTHSHIFT = @MONTH
        AND IDSTAFF = @IDSTAFF;

    -- Trả về mức lương tính được
    SELECT @TotalSalary AS Salary;
END

--Get list id staff
CREATE PROC PROC_GETLISTID
AS
BEGIN
	SET NOCOUNT ON;

    SELECT * FROM STAFFS
END


-- Create bill
CREATE PROCEDURE createbill
    @IDSTAFF VARCHAR(10),
    @PRINTDATE DATETIME
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @NEWID INT;
    SELECT @NEWID = ISNULL(MAX(ID), 0) + 1 FROM BILL;

    -- Thêm thông tin vào bảng BILL
    INSERT INTO BILL (ID, IDSTAFF, PRINTDATE)
    VALUES (@NEWID, @IDSTAFF, @PRINTDATE);

	select * from bill where ID = @NEWID;
END;
-- drop proc createbill

-- drop proc createbill
-- Thanh Toan
CREATE PROCEDURE CalculateBill
	@ID INT,
    @TIMEEND DATETIME,
    @IDSTAFF VARCHAR(10),
    @CLASSIFY VARCHAR(10),
    @IDTABLE VARCHAR(10)
AS
BEGIN
    SET NOCOUNT ON;

    -- Lấy giờ bắt đầu từ SETTABLE
    DECLARE @TIMESTART DATETIME;
	DECLARE @PHONENUM VARCHAR(10);
    SELECT @TIMESTART = TIMESTART, @PHONENUM = PHONENUM
    FROM SETTABLE
    WHERE IDTABLE = @IDTABLE;

    -- Tính số giờ chơi
    DECLARE @HOURS FLOAT;
    SET @HOURS = DATEDIFF(hour, @TIMESTART, @TIMEEND);
	if (@HOURS < 1)
	begin
		set @HOURS = 1;
	end;

    -- Lấy giá mỗi giờ của bàn
    DECLARE @PRICE FLOAT;
    IF @CLASSIFY = 'Carom'
        SET @PRICE = 59000;
    ELSE IF @CLASSIFY = 'Pool'
        SET @PRICE = 49000;
    ELSE IF @CLASSIFY = 'Libre'
        SET @PRICE = 39000;

    -- Tính số tiền được giảm (nếu có)
    DECLARE @DISCOUNT FLOAT;
    SET @DISCOUNT = 0;
	DECLARE @POINTS INT, @NAMECUS nvarchar(255);
    IF @PHONENUM IS NOT NULL
    BEGIN      
        SELECT @POINTS = POINTS, @NAMECUS = NAMECUS
        FROM VIPCUSTOMERS
        WHERE PHONENUM = @PHONENUM;

        IF @POINTS > 1000 AND @POINTS <= 3000
            SET @DISCOUNT = @PRICE * @HOURS * 0.05;
        ELSE IF @POINTS > 3000 AND @POINTS <= 6000
            SET @DISCOUNT = @PRICE * @HOURS * 0.08;
        ELSE IF @POINTS > 6000
            SET @DISCOUNT = @PRICE * @HOURS * 0.12;
    END

    -- Tính tổng tiền thanh toán
    DECLARE @TOTAL FLOAT;
    SET @TOTAL = @PRICE * @HOURS - @DISCOUNT;

    -- Cập nhật trạng thái của SETTABLE
    UPDATE SETTABLE
    SET TIMEEND = null, TIMESTART = null, IDSTAFF = null, PHONENUM = null
    WHERE IDTABLE = @IDTABLE;

	UPDATE BILLARDTABLE
    SET SITUATION = 'Empty'
    WHERE IDTABLE = @IDTABLE;

    -- Thêm thông tin vào bảng DETAILBILL

    INSERT INTO DETAILBILL (ID, IDTABLE, BEGINAT, FINISHAT, PRICE, PHONENUM, NAMECUS)
    VALUES (@ID, @IDTABLE, @TIMESTART, @TIMEEND, @TOTAL, @PHONENUM, @NAMECUS);

    -- Cộng điểm vào POINTS của VIPCUSTOMERS
    IF @PHONENUM IS NOT NULL
    BEGIN
        DECLARE @POINTS_TO_ADD INT;
        SET @POINTS_TO_ADD = CONVERT(INT, @TOTAL / 1000);

        UPDATE VIPCUSTOMERS
        SET POINTS = POINTS + @POINTS_TO_ADD
        WHERE PHONENUM = @PHONENUM;
    END

    -- Trả về tổng tiền thanh toán
    SELECT * from DETAILBILL WHERE DETAILBILL.ID = @ID;
END

drop proc CalculateBill

-- Thong ke
CREATE PROCEDURE GetRevenueByMonth
    @Year INT,
    @Month INT
AS
BEGIN
    SELECT
        MONTH(d.BEGINAT),
        SUM(d.PRICE)
    FROM
        BILL b
        INNER JOIN DETAILBILL d ON b.ID = d.ID
    WHERE
        YEAR(d.BEGINAT) = @Year
        AND MONTH(d.BEGINAT) = @Month
    GROUP BY
        MONTH(d.BEGINAT)
END


CREATE PROCEDURE GetRevenueByYear
    @Year INT
AS
BEGIN
    SELECT
        CASE
            WHEN GROUPING(MONTH(d.BEGINAT)) = 1 THEN 'Total Year'
            ELSE CONVERT(VARCHAR(2), MONTH(d.BEGINAT))
        END AS [Month],
        SUM(d.PRICE) AS Revenue
    FROM
        BILL b
        INNER JOIN DETAILBILL d ON b.ID = d.ID
    WHERE
        YEAR(d.BEGINAT) = @Year
    GROUP BY
        MONTH(d.BEGINAT) WITH ROLLUP
    ORDER BY
        [Month]
END

EXEC GetRevenueByYear @Year = 2024;
drop proc GetRevenueByYear